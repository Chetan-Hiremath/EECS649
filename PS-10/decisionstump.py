# 1. Title: 1984 United States Congressional Voting Records Database
#
# 2. Source Information:
#     (a) Source:  Congressional Quarterly Almanac, 98th Congress,
#                  2nd session 1984, Volume XL: Congressional Quarterly Inc.
#                  Washington, D.C., 1985.
#     (b) Donor: Jeff Schlimmer (Jeffrey.Schlimmer@a.gp.cs.cmu.edu)
#     (c) Date: 27 April 1987
#
# 4. Relevant Information:
#       This data set includes votes for each of the U.S. House of
#       Representatives Congressmen on the 16 key votes identified by the
#       CQA.  The CQA lists nine different types of votes: voted for, paired
#       for, and announced for (these three simplified to yea), voted
#       against, paired against, and announced against (these three
#       simplified to nay), voted present, voted present to avoid conflict
#       of interest, and did not vote or otherwise make a position known
#       (these three simplified to an unknown disposition).
#
# 5. Number of Instances: 435 (267 democrats, 168 republicans)
#
# MSB NOTE: Any voting record (instance) that contained >=1 unknowns was removed.
# MSB NOTE: This left only 232 of the original 435 instances.
#
# 6. Number of Attributes: 16 + class name = 17 (all Boolean valued)
#
# MSB NOTE: All attribute values were changed to 0s and 1s as noted below
#
# 7. Attribute Information:
#   1. Class Name: 2 (0=democrat, 1=republican)
#   2. handicapped-infants: 2 (1=y,0=n)
#   3. water-project-cost-sharing: 2 (1=y,0=n)
#   4. adoption-of-the-budget-resolution: 2 (1=y,0=n)
#   5. physician-fee-freeze: 2 (1=y,0=n)
#   6. el-salvador-aid: 2 (1=y,0=n)
#   7. religious-groups-in-schools: 2 (1=y,0=n)
#   8. anti-satellite-test-ban: 2 (1=y,0=n)
#   9. aid-to-nicaraguan-contras: 2 (1=y,0=n)
#  10. mx-missile: 2 (1=y,0=n)
#  11. immigration: 2 (1=y,0=n)
#  12. synfuels-corporation-cutback: 2 (1=y,0=n)
#  13. education-spending: 2 (1=y,0=n)
#  14. superfund-right-to-sue: 2 (1=y,0=n)
#  15. crime: 2 (1=y,0=n)
#  16. duty-free-exports: 2 (1=y,0=n)
#  17. export-administration-act-south-africa: 2 (1=y,0=n)
#
table=[
    [0,0,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [0,1,1,1,0,0,0,1,1,1,1,0,0,1,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,1,1,0,1,1,1,0,0,0,0,0,0,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,1,0,1,0,0,0,1,1,1,1,1,0,1,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,1],
    [0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1],
    [0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,0],
    [1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,0,1],
    [1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,1,0,0,0,1,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,0,1],
    [1,1,0,1,1,1,0,1,0,1,1,0,0,1,1,0,1],
    [0,1,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1],
    [0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0],
    [0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1],
    [0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,1],
    [1,0,0,0,1,1,0,0,0,0,1,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [0,0,0,1,0,1,1,0,0,0,1,1,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,0,1,1,1,0,0,0,1,1],
    [0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1],
    [0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,1],
    [0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,1],
    [0,1,0,0,0,1,1,0,0,0,0,1,1,0,1,0,1],
    [0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,1],
    [0,1,1,1,0,0,0,0,1,1,0,1,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,1],
    [0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1],
    [0,0,0,1,0,0,1,0,1,1,1,0,0,0,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [1,0,1,0,1,1,1,0,0,0,1,1,1,1,0,0,1],
    [0,0,0,1,0,0,1,1,1,1,1,0,0,0,1,0,1],
    [0,1,0,1,0,0,1,1,1,1,0,0,0,0,0,1,1],
    [1,0,0,0,1,0,0,1,1,1,1,0,0,1,1,0,1],
    [1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1],
    [1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,1],
    [0,0,0,1,0,0,0,1,1,1,1,0,0,1,0,1,1],
    [1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [0,0,1,1,0,0,1,0,1,1,1,1,0,1,0,1,1],
    [0,0,0,1,0,0,1,1,1,1,1,1,0,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,0],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1],
    [0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,1],
    [0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,0,1],
    [1,0,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1],
    [1,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1],
    [1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,1,0,0,1,0,1],
    [0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,1],
    [0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [1,0,0,1,1,0,0,1,1,1,1,0,0,0,1,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,1],
    [0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,1,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1],
    [0,0,0,1,0,0,1,1,1,1,1,0,1,0,0,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1],
    [0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [0,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1],
    [1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,0,1,1,0,0,0,0,1,1,0,1,0,0,1,1,1],
    [1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1],
    [0,0,0,1,0,0,1,1,1,1,0,1,0,0,1,1,1],
    [1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,1,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1],
    [0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,1],
    [1,0,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,1,0,0,1,1,1],
    [0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,1,1,1],
    [1,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0],
    [0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1],
    [1,1,0,0,0,0,0,1,1,1,1,0,0,0,1,0,1],
    [0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [1,1,0,0,1,1,0,1,0,0,1,0,0,0,1,1,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0],
    [1,0,0,1,1,1,1,1,1,0,1,0,0,0,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,0,0,1,0,0,0,1,1,1,1,0,0,0,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1],
    [0,1,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1],
    [0,1,0,1,0,0,1,1,1,0,1,1,0,1,1,1,1],
    [0,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1],
    [1,0,0,1,1,1,1,0,0,0,1,0,1,1,1,1,1],
    [0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1],
    [1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,1,0,0,1,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,1,0],
    [0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1],
    [0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [1,0,1,1,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1],
    [0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0],
    [0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [0,0,1,1,0,0,1,0,1,1,1,0,0,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0],
    [0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,1,1,1],
    [1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,1,1,1,0,1,0,1],
    [1,0,0,0,1,1,0,1,0,1,1,0,0,0,1,0,1],
    [0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [1,0,0,0,1,1,1,1,0,0,1,0,1,0,1,1,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0],
    [1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1],
    [0,0,1,0,0,0,1,1,0,1,0,1,0,0,0,1,1],
    [1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1],
    [1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,1],
    [1,1,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1],
    [0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1],
    [1,1,1,0,1,1,1,0,0,0,1,1,0,1,0,0,0],
    [1,1,1,0,1,1,1,0,0,0,0,1,0,1,1,0,1],
    [0,0,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0],
    [0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,0,1,1,0,1],
    [1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,1],
    [0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1],
    [0,1,1,0,0,1,1,0,0,0,0,1,1,1,1,1,0],
    [0,1,1,0,0,0,0,0,1,1,0,1,0,0,0,1,0],
    [1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,1],
    [0,1,1,1,0,1,1,0,1,0,0,1,0,1,0,1,1],
    [0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,1],
    [1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,0],
    [1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1],
    [0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,0,1],
    [0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0],
    [1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,1],
    [0,1,0,1,0,0,1,1,1,1,1,1,0,0,0,0,1],
    [1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1],
    [1,1,1,0,1,1,1,0,0,0,1,0,0,1,1,0,1],
    [0,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1],
    [0,1,1,1,0,0,0,1,1,0,1,0,0,0,0,0,1],
    [0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1],
    [1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1],
    [0,0,1,1,0,1,1,1,1,0,0,1,0,1,0,1,1],
    [0,0,0,1,0,0,1,1,1,1,0,1,0,0,0,1,1],
    [0,0,1,1,0,0,1,1,1,1,0,1,0,0,1,1,1],
    [0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [1,0,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1],
    [1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1],
    [0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1],
]

import numpy as np
from math import log2
 
N=232
def B(q):
  if q==0 or q==1:
    return 0
  return -(q*log2(q)+(1-q)*log2(1-q))
 
# test the entropy function, see p. 704 of R&N
for q in [0, 1, 0.5, 0.99, 9/(9+5)]:
  print("q = %.3f, B(q) = %.3f" % (q, B(q)) )
print()
print("Gain(Patrons) = %.3f" % (1 - (2/12*B(0/2) + 4/12*B(4/4) + 6/12*B(2/6))) )
print("Gain(Type) = %.3f" % (1 - (2/12*B(1/2) + 2/12*B(1/2) + 4/12*B(2/4) + 4/12*B(2/4))) )
print()

 
classatt = range(17)
# count the positive, negative examples for classication and each attribute
pos=[ sum([table[j][i]    for j in range(len(table))]) for i in classatt ]
neg=[ sum([table[j][i]==0 for j in range(len(table))]) for i in classatt ]
   
for a in classatt:
    print("%d: \t%d \t%d \t%.4f" % (a+1, pos[a], neg[a], B(pos[a]/(pos[a]+neg[a]))))
 
#These upcoming portions are used to modify this program.  
pos1 = [ sum([table[j][0]==1 and table[j][i]==1   for j in range(len(table))]) for i in classatt ]
neg1 = [ sum([table[j][0]==0 and table[j][i]==1   for j in range(len(table))]) for i in classatt ]
 
print()
print("Positive examples:")
print(pos1)
print("Negative examples:")
print(neg1)
print()

remarr = np.array([])
gainarr = np.array([])
for i in classatt:
    remainder = (pos[i]/N * B(pos1[i]/pos[i])) + (neg[i]/N * B(neg1[i]/pos[i]))
    gain = B(pos[0]/N) - (pos[i]/N * B(pos1[i]/pos[i])) - (neg[i]/N * B(neg1[i]/pos[i]))
    remarr = np.append(remarr, remainder)
    gainarr = np.append(gainarr, gain)
print("Remainder values:")
print(remarr)
print("Gain values:")
print(gainarr)
print()
print("Decision Stump:")
for i in classatt:
    print("%d: \t%.i \t%.i \t%.4f \t%.4f" % (i+1, pos1[i], neg1[i], remarr[i], gainarr[i]))
print("The Attribute Number with the highest gain value", max(gainarr[1:]), "is", (np.argmax(gainarr[1:]) + 2))